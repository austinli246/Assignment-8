[{"/Users/austin/Desktop/asgmt8/src/index.js":"1","/Users/austin/Desktop/asgmt8/src/reportWebVitals.js":"2","/Users/austin/Desktop/asgmt8/src/components/App.js":"3","/Users/austin/Desktop/asgmt8/src/components/Table.js":"4","/Users/austin/Desktop/asgmt8/src/components/TableCell.js":"5","/Users/austin/Desktop/asgmt8/src/components/TableRow.js":"6","/Users/austin/Desktop/asgmt8/src/components/Dashboard.js":"7"},{"size":511,"mtime":1610655945940,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610654784410,"results":"10","hashOfConfig":"9"},{"size":207,"mtime":1610660414339,"results":"11","hashOfConfig":"9"},{"size":4060,"mtime":1610738476337,"results":"12","hashOfConfig":"9"},{"size":197,"mtime":1610656167517,"results":"13","hashOfConfig":"9"},{"size":780,"mtime":1610664600381,"results":"14","hashOfConfig":"9"},{"size":1398,"mtime":1610738024584,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"107n536",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/austin/Desktop/asgmt8/src/index.js",[],["33","34"],"/Users/austin/Desktop/asgmt8/src/reportWebVitals.js",[],"/Users/austin/Desktop/asgmt8/src/components/App.js",["35","36"],"import Table from './Table'\nimport TableCell from './TableCell'\nimport TableRow from './TableRow'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/austin/Desktop/asgmt8/src/components/Table.js",["37"],"import React, { Component } from 'react'\nimport '.././style.css'\nimport TableRow from './TableRow'\nimport Dashboard from './Dashboard'\n\nclass Table extends Component {\n    constructor(){\n        super();\n        this.state ={\n            row : [''],\n            col : [''],\n            color: \" \",\n            hovercolor: false\n          \n        }\n    }\nAddRow = () => {\n\n   let changerows = this.state.row\n   changerows.push('')\n   this.setState({rows: changerows})\n}\nAddCol = () => {\n    let changecol = this.state.col\n    changecol.push('')\n    this.setState({rows: changecol})\n \n }\n DelRow = () => {\n     if (this.state.row.length ===1){\n         alert('Cannot Delete 1 Row')\n     }\n     else{\n        let changerows = this.state.row\n        changerows.pop('')\n        this.setState({rows: changerows})\n \n     }\n  \n }\n  DelCol = () =>{\n    if (this.state.col.length ===1){\n        alert('Cannot Delete 1 Column')\n    }\n    else{\n        let changecol = this.state.col\n        changecol.pop('')\n        this.setState({col: changecol})\n    }\n   \n \n }\n setColor = (e) => {\n   this.setState({color: e.target.value})\n\n }\n clickColor =(e) => {\n    if (this.state.color === \" \")\n     alert('Please Select a Color');\n     e.target.style.backgroundColor = this.state.color\n     e.target.classList.remove('nocolor')\n     \n }\n fillUncoloredCells = () => {\n     if (this.state.color === \" \")\n     alert('Please Select a Color');\n     const uncolor = document.getElementsByClassName('nocolor')\n     let all = Array.from(uncolor);\n     all.forEach(cell => {cell.style.backgroundColor = this.state.color; cell.classList.remove('nocolor')})\n }\n fillAllCells = () => {\n    if (this.state.color === \" \")\n    alert('Please Select a Color');\n    const allcells = document.getElementsByTagName('td')\n    let all = Array.from(allcells);\n    all.forEach(cell => {cell.style.backgroundColor = this.state.color; cell.classList.remove('nocolor')})\n}\nRestoreAllCells = () => {\n    if (this.state.color === \" \")\n    alert('Please Select a Color');\n    const allcells = document.getElementsByTagName('td')\n    let all = Array.from(allcells);\n    all.forEach(cell => {cell.style.backgroundColor = \"black\"; cell.classList.add('nocolor')})\n}\nmousedown = (e) =>{\n    this.setState({hoverColor: true}) \n    e.target.style.backgroundColor = this.state.color; \n}\nmouseover = (e) =>{\n    \n    if(this.state.hoverColor ===true) {\n        e.target.style.backgroundColor = this.state.color; \n        \n        e.target.classList.remove('nocolor')\n    }\n}\nmouseup = () => {\n    if (this.state.hoverColor ===true){\n       \n        this.setState({hoverColor: false})\n    }\n}\n\n    render() {\n        return (\n        <div>\n            <h2>EXPLORE THE GRID</h2>\n          \n                <Dashboard\n                AddRow = {this.AddRow}\n                AddCol = {this.AddCol}\n                DelRow = {this.DelRow}\n                DelCol = {this.DelCol}\n                fillUncoloredCells = {this.fillUncoloredCells} \n                fillAllCells = {this.fillAllCells}\n                RestoreAllCells = {this.RestoreAllCells}\n                setColor ={this.setColor}\n\n                />\n       \n\n            <div className = \"containergrid\">\n                <table id = \"grid\">\n                    <tbody>\n                    {this.state.row.map((r) => (\n\n                     <tr>\n                         {this.state.col.map((c) => \n                           <td \n                           className = \"nocolor\" \n                           onClick = {this.clickColor} \n                           onMouseOver = {this.mouseover}\n                           onMouseDown={this.mousedown} \n                           onMouseUp = {this.mouseup}>\n                               \n                           </td>\n                         )}\n                       \n                     </tr>   \n\n                    ))}\n                    \n                    </tbody>\n                    \n                </table>\n            </div>\n        </div>\n        )\n           \n    }\n}\nexport default Table\n\n\n","/Users/austin/Desktop/asgmt8/src/components/TableCell.js",[],"/Users/austin/Desktop/asgmt8/src/components/TableRow.js",[],"/Users/austin/Desktop/asgmt8/src/components/Dashboard.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":17},{"ruleId":"42","severity":1,"message":"46","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":16},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'TableCell' is defined but never used.","Identifier","unusedVar","'TableRow' is defined but never used.","no-global-assign","no-unsafe-negation"]